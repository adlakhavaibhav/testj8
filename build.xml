<project name="test" basedir="." default="build">

    <property file="build.properties"/>
    <property file="environmentLocator.properties"/>

    <!-- Specify exact path to included jar files -->
    <path id="compile.classpath">
        <fileset dir="${lib.root.dir}">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dependencies.dir}">
            <include name="**/*.jar"/>
        </fileset>

    </path>


    <!-- Copy any resource or configuration files -->
    <target name="copyresources">
        <copy todir="${package.target.dir}" includeEmptyDirs="no">
            <fileset dir="${project.src.dir}">
                <patternset>
                    <include name="**/*.conf"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.xml"/>
                    <exclude name="**/*.java"/>
                </patternset>
            </fileset>
        </copy>

    </target>

    <target name="print-version">
        <echo>Java/JVM version: ${ant.java.version}</echo>
        <echo>Java/JVM detail version: ${java.version}</echo>
    </target>

    <target name="collect-resources">
       <copy todir="${project.dist.dir}/WEB-INF/classes/spring">
            <fileset dir="${project.resources.dir}/${project.env}/spring"/>
        </copy>
        <!-- <copy todir="${project.dist.dir}/WEB-INF/classes">
            <fileset dir="${project.resources.dir}//${project.env}/cache"/>
        </copy>


        <copy todir="${project.dist.dir}/WEB-INF/classes">
            <fileset dir="${project.resources.dir}/${project.env}/logging"/>
        </copy>-->

        <copy file="environmentLocator.properties"
              tofile="${project.dist.dir}/WEB-INF/classes/environmentLocator.properties"/>
        <replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_SERVER"
                 value="${DB_SERVER}"/>
        <replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_PORT"
                 value="${DB_PORT}"/>
        <replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_NAME"
                 value="${DB_NAME}"/>
        <replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_USERID"
                 value="${DB_USERID}"/>
        <replace file="${project.dist.dir}/WEB-INF/classes/spring/spring-hibernate.xml" token="DB_PASSWD"
                 value="${DB_PASSWD}"/>


        <copy todir="${project.dist.dir}/WEB-INF/lib">
            <fileset dir="${lib.root.dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <copy todir="${project.dist.dir}/WEB-INF/lib">
            <fileset dir="${lib.jest.dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>

        <copy todir="${project.dist.dir}/WEB-INF/lib">
            <fileset dir="${lib.jedis.dir}">
                <include name="*.jar"/>
            </fileset>
        </copy>


    </target>


    <target name="compile" depends="prepare,copyresources,collect-resources">
        <javac srcdir="src" destdir="${package.target.dir}" debug="true" debuglevel="lines,vars,source" target="1.8"
               deprecation="false" nowarn="true">
            <classpath refid="compile.classpath"/>
            <compilerarg value="-Xlint">
            </compilerarg>
        </javac>
    </target>
    <!--<target name="build.env.check">
        <condition property="build.env.prod">
            <equals arg1="${build.env}" arg2="prod"/>
        </condition>
    </target>-->


    <!--<target name="build" depends="compile,build.exploded" description="build production WAR">
        <jar destfile="${project.dist.dir}/${package.jar.name}">
            <zipfileset dir="${package.target.dir}" includes="**/**" excludes="test/**/**" />
        </jar>
    </target>-->

    <target name="build" depends="clean, compile" description="build production WAR">
        <mkdir dir="${project.dist.dir}/WEB-INF"/>
        <mkdir dir="${project.dist.dir}/META-INF"/>
        <mkdir dir="${project.dist.dir}/WEB-INF/classes"/>
        <mkdir dir="${project.dist.dir}/WEB-INF/classes/spring"/>
        <copy todir="${project.dist.dir}">
            <fileset dir="${project.view.dir}">
                <include name="**/**"/>
            </fileset>
        </copy>

        <!-- <copy todir="${project.dist.dir}/exploded/${package.war.name}/WEB-INF/lib">
       </copy> -->

        <copy todir="${project.dist.dir}/WEB-INF/classes">
            <fileset dir="${package.target.dir}" excludes="test/**/**"/>
        </copy>
        <copy todir="${project.dist.dir}/WEB-INF/">
            <fileset dir="${project.resources.dir}/${project.env}/WEB-INF" excludes="test/**/**"/>
        </copy>
       <!-- <copy todir="${project.dist.dir}/WEB-INF/classes">
            <fileset file="${project.resources.dir}/StripesResources.properties"/>
        </copy>-->
        <!--<copy todir="${project.dist.dir}/WEB-INF/classes/spring">
            <fileset dir="${project.resources.dir}/spring" excludes="test/**/**" />
        </copy>-->
    </target>


    <target name="deploy" depends="build">
        <delete dir="${tomcat.deploy.dir}/${package.war.name}"/>

        <copy todir="${tomcat.deploy.dir}/${package.war.name}">
            <fileset dir="${project.dist.dir}" excludes="test/**/**"/>
        </copy>

    </target>

    <!-- Remove classes directory for clean build -->
    <target name="clean" description="Prepare for clean build">
        <delete dir="${package.target.dir}"/>
        <delete dir="${project.dist.dir}"/>
    </target>

    <!-- Check timestamp on files -->
    <target name="prepare">
        <mkdir dir="${project.dist.dir}"/>
        <mkdir dir="${package.target.dir}"/>
        <tstamp/>
    </target>

    <target name="dev-clean" depends="clean"/>


</project>
